# Load icons from UIAssets
import tkinter
import os
import platform
import json
from json.decoder import JSONDecodeError

# FileHandler locations
raw = os.path.join(os.getcwd(),"Editor")
IconDir = os.path.join(raw,"UIAssets")
dataLocations = ""
templates = ""

# Logos
crumbl_logo = os.path.join(IconDir,"favicon.png")
engine_logo = os.path.join(IconDir,"logo.png")
studio_logo = os.path.join(IconDir,"corp_logo.png")

# Ribbon icons
run_asset = os.path.join(IconDir,"run.png")
build_asset = os.path.join(IconDir,"build.png")

select_asset = os.path.join(IconDir,"select.png")
move_asset = os.path.join(IconDir,"move.png")
rotate_asset = os.path.join(IconDir,"rotate.png")
resize_asset = os.path.join(IconDir,"resize.png")

ruler_asset = os.path.join(IconDir,"ruler.png")

new_layer_asset = os.path.join(IconDir,"newlayer.png")
new_scene_asset = os.path.join(IconDir,"newscene.png")

new_text_asset = os.path.join(IconDir,"newtext.png")
new_button_asset = os.path.join(IconDir,"newbutton.png")
new_slider_asset = os.path.join(IconDir,"newSlider.png")
new_entry_asset = os.path.join(IconDir,"newEntry.png")
new_checkbutton_asset = os.path.join(IconDir,"newCheckbutton.png")
new_rbutton_asset = os.path.join(IconDir,"newRadioButton.png")
new_dropdown_asset = os.path.join(IconDir,"newDropdown.png")
new_object_asset = os.path.join(IconDir,"newObject.png")
new_cbutton_asset = os.path.join(IconDir,"checkbutton.png")
new_switch_asset = os.path.join(IconDir,"switch.png")

# Settings icons
sv_dark_asset = os.path.join(IconDir,"SVDarkMode.png")
sv_light_asset = os.path.join(IconDir,"SVLightMode.png")
forest_dark_asset = os.path.join(IconDir,"ForestDarkMode.png")
forest_light_asset = os.path.join(IconDir,"ForestLightMode.png")
tk_dark_asset = os.path.join(IconDir,"tkDarkMode.png")
tk_light_asset = os.path.join(IconDir,"tkLightMode.png")
changeImage = os.path.join(IconDir,"changedsetting.png")

# Splash screen assets
launcherSplash = os.path.join(IconDir,"normalSplash.png")
projectSplash = os.path.join(IconDir,"projectSplash.png")

# Launcher assets
new_project_asset = os.path.join(IconDir,"newProject.png")
open_project_asset = os.path.join(IconDir,"open.png")
git_clone_asset = os.path.join(IconDir,"git.png")
settings_asset = os.path.join(IconDir,"settings.png")
noFile_asset = os.path.join(IconDir,"noFile.png")

# JSON handling
# Data layouts
templateData = {"templateNames":["Blank"],"templateLoctaions":["NoTemplate/"],"templateThumbnails":["NoTemplate/noPack.png"],"templateDescriptions":["Blank editor project with minimal engine bindings"],"templateTypes":["All"],"uses":["1"]}
settingData = {"theme":"sun_valley","darkMode":True}
recentFileData = {"recentFilenames":[],"recentLocations":[],"recentDates":[],"objectTemplates":[]}
projectData = {"Title":"","author":"NULL","uiLayout":[],"fileStructure":[]}

# Functions (Stolen from visualized because it just works)
def get_save_loc():
    global dataLocations
    global templates
    userOS = platform.system()
    usrHome = os.path.expanduser("~")
    if userOS == "Windows":
        dataLocations = os.path.join(usrHome,"AppData/Roaming/CrumblStudios/crumbl2D")
        try:
            os.mkdir(os.path.join(usrHome,"AppData/Roaming/CrumblStudios/"))
        except FileExistsError:
            pass
    else:
        dataLocations = os.path.join(usrHome,".crumbl2D")
    print("Data location is %s" %dataLocations)
    
    if os.path.join(dataLocations,"settings.json"):
        try:
            os.mkdir(dataLocations)
            templates = os.path.join(dataLocations,"templates")
            os.mkdir(templates)
            print("Data folder generated... file will be generated by json decoder")
        except FileExistsError:
            print("Data folder found, however settings.json was not found")
    else:
        print("Save folder found!")
    templates = os.path.join(dataLocations,"templates")
    print("Template location is %s" %templates)
    return dataLocations

def save_data(data):
    with open(os.path.join(dataLocations, 'userData.json'), 'w') as save_file:
        json.dump(data, save_file)

def get_setting_data(data_layout = settingData):
    try:
        with open(os.path.join(dataLocations, 'userData.json')) as save_file:
            print("SETTINGS: attempting to load file...")
            return json.load(save_file)
    except JSONDecodeError:
        print("SETTINGS: JSON can't decode...")
        with open(os.path.join(dataLocations, 'userData.json'), 'w') as save_file_2:
            json.dump(data_layout, save_file_2)
        return data_layout
    except FileNotFoundError:
        print("SETTINGS: file not found,generating...")
        with open(os.path.join(dataLocations, 'userData.json'), 'w') as save_file_3:
            json.dump(data_layout, save_file_3)
        return data_layout

def get_template_data(data_layout = templateData):
    global templates
    try:
        with open(os.path.join(templates, 'templateData.ceTemplates')) as save_file:
            print("TEMPLATES: attempting to load file...")
            return json.load(save_file)
    except JSONDecodeError:
        print("TEMPLATES: JSON can't decode...")
        with open(os.path.join(templates, 'templateData.ceTemplates'), 'w') as save_file_2:
            json.dump(data_layout, save_file_2)
        return data_layout
    except FileNotFoundError:
        print("TEMPLATES: file not found, generating template data file")
        try:
            with open(os.path.join(templates, 'templateData.ceTemplates'), 'w') as save_file_3:
                json.dump(data_layout, save_file_3)
        except FileNotFoundError:
            print("TEMPLATES: No directory found, generating template data folder")
            os.mkdir(templates)
            with open(os.path.join(templates, 'templateData.ceTemplates'), 'w') as save_file_3:
                json.dump(data_layout, save_file_3)
        return data_layout

def get_user_data(data_layout = recentFileData):
    try:
        with open(os.path.join(dataLocations, 'userdata.json')) as save_file:
            print("USERDATA: attempting to load file...")
            return json.load(save_file)
    except JSONDecodeError:
        print("USERDATA: JSON can't decode...")
        with open(os.path.join(dataLocations, 'userdata.json'), 'w') as save_file_2:
            json.dump(data_layout, save_file_2)
        return data_layout
    except FileNotFoundError:
        print("USERDATA: file not found, generating template data file")
        try:
            with open(os.path.join(dataLocations, 'userdata.json'), 'w') as save_file_3:
                json.dump(data_layout, save_file_3)
        except FileNotFoundError:
            print("USERDATA: No directory found, generating template data folder")
            with open(os.path.join(dataLocations, 'userdata.json'), 'w') as save_file_3:
                json.dump(data_layout, save_file_3)
        return data_layout

def loadData(dir,statusText,statusBar,dataStyle = projectData):
    statusText.set("Getting project files: loading JSON data")
    dataStyle = {"Title":"","author":"NULL","uiLayout":[],"fileStructure":[]}
    try:
        with open(os.path.join(dir, 'userdata.json')) as save_file:
            print("USERDATA: attempting to load file...")
            return json.load(save_file)
    except JSONDecodeError:
        print("USERDATA: JSON can't decode...")
        with open(os.path.join(dir, 'userdata.json'), 'w') as save_file_2:
            json.dump(dataStyle, save_file_2)
        return dataStyle
    except FileNotFoundError:
        print("USERDATA: file not found, generating template data file")
        try:
            with open(os.path.join(dir, 'userdata.json'), 'w') as save_file_3:
                json.dump(dataStyle, save_file_3)
        except FileNotFoundError:
            print("USERDATA: No directory found, generating template data folder")
            with open(os.path.join(dir, 'userdata.json'), 'w') as save_file_3:
                json.dump(dataStyle, save_file_3)
        return dataStyle
    statusBar.step(33)

def createData(dir,title,statusText,statusBar,dataStyle = projectData):
    statusText.set("Creating project files 0%")